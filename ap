#include "stdc++.h"
#include <limits.h>
#include <stdbool.h>
#include "iterations"
#define INF 0x3f3f3f3f
#define MAX_SIZE 1000
#define MY_SEED 1337
#define K 0
#define P 1
#define R 0
#define F 1
#define N 2

using namespace std;

typedef pair<int, int> iPair;

void test_alg();

struct Graph
{
	int V;

	vector< pair<int, iPair> > edges;
    list< pair<int, int> > *adj;

	Graph(int V)
	{
		this->V = V;
		adj = new list<iPair> [V];
	}

	void init(int V)
	{
	    edges.clear();
	    for(int i = 0; i < this->V; i++)
            adj[i].clear();
        this->V = V;
	}

	void addEdgeP(int u, int v, int w)
	{
	    adj[u].push_back(make_pair(v, w));
        adj[v].push_back(make_pair(u, w));
	}

	void addEdge(int u, int v, int w)
	{
		edges.push_back(make_pair(w, make_pair(u, v)));
	}

	void display_edges();
    void build(int iSize, int mode, int alg);
	void kruskalMST(int);
    void primMST(int);
};

struct DisjointSets
{
	int *parent, *rnk;
	int n;

	DisjointSets(int n)
	{

		this->n = n;
		parent = new int[n+1];
		rnk = new int[n+1];

		for (int i = 0; i <= n; i++)
		{
			rnk[i] = 0;

			parent[i] = i;
		}
	}

	int find(int u)
	{
		if (u != parent[u])
			parent[u] = find(parent[u]);
		return parent[u];
	}

	void merge(int x, int y)
	{
		x = find(x), y = find(y);

		if (rnk[x] > rnk[y])
			parent[y] = x;
		else
			parent[x] = y;

		if (rnk[x] == rnk[y])
			rnk[y]++;
	}
};

void Graph::display_edges()
{

	vector< pair<int, iPair> >::iterator it;
	for (it=edges.begin(); it!=edges.end(); it++)
	{
		cout << it->second.first << " - " << it->second.second << " [ " << it->first << " ]"<< endl;
	}
}

void Graph::kruskalMST(int print = 0)
{

	sort(edges.begin(), edges.end());

	DisjointSets ds(V);

	vector< pair<int, iPair> >::iterator it;
	for (it=edges.begin(); it!=edges.end(); it++)
	{
		int u = it->second.first;
		int v = it->second.second;

		int set_u = ds.find(u);
		int set_v = ds.find(v);

		if (set_u != set_v)
		{
            if(print)
                cout << u << " - " << v << endl;
			ds.merge(set_u, set_v);
		}
	}
}


void Graph::primMST(int print = 0)
{
    priority_queue< iPair, vector <iPair> , greater<iPair> > pq;

    int src = 0;

    vector<int> key(V, INF);


    vector<int> parent(V, -1);


    vector<bool> inMST(V, false);

    pq.push(make_pair(0, src));
    key[src] = 0;

    while (!pq.empty())
    {

        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;


        list< pair<int, int> >::iterator i;
        for (i = adj[u].begin(); i != adj[u].end(); ++i)
        {


            int v = (*i).first;
            int weight = (*i).second;


            if (inMST[v] == false && key[v] > weight)
            {

                key[v] = weight;
                pq.push(make_pair(key[v], v));
                parent[v] = u;
            }
        }
    }

    if(print)
    {
        for (int i = 1; i < V; ++i)
            printf("%d - %d\n", parent[i], i);
    }
}


void Graph::build(int iSize, int mode, int alg) // iSize = nr de varfuri; mode = cazul fav/defav.random (0-random, 1 -fav, 2 -defav.); alg = algoritmul (0 = kruskal; 1 = prim.)
{
    this->init(iSize);
    srand(MY_SEED);
    for(int i = 0; i < iSize-1; i++)
    {
          switch(mode)
          {
             case 0:
             {
                 for(int j = i+1; j < iSize; j+=2)
                    alg ?  this->addEdgeP(i, j, rand()% 10) :  this->addEdge(i, j, rand()% 10);
                 break;
             }
             case 1:
             {
                 alg ?  this->addEdgeP(i, i+1, rand()% 10) :  this->addEdge(i, i+1, rand()% 10);
                 break;
             }
             case 2:
             {
                for(int j = i+1; j < iSize; j++)
                    alg ?  this->addEdgeP(i, j, rand()% 10) :  this->addEdge(i, j, rand() % 10);
                break;
             }
          }

    }
}




int main()
{



                cout<<"\n\nPentru un graf cu 15 muchii: ";
                cout<<"\nCazul Favorabil: ";
                Graph G(MAX_SIZE);
                G. build (15, F, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G. build (15, F, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks()<<" iteratii.";
                cout<<"\nCazul Nefavorabil: ";
                G.build(15,N, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (15, N, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";
                cout<<"\nCazul Random :";
                G.build(15, R, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (15, R, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";

                cout<<"\n\nPentru un graf cu 150 muchii: ";
                cout<<"\nCazul Favorabil: ";
                 G. build (150, F, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G. build (150, F, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks()<<" iteratii.";
                cout<<"\nCazul Nefavorabil: ";
                G.build(150,N, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (150, N, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";
                cout<<"\nCazul Random :";
                G.build(150, R, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (150, R, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";


                cout<<"\n\nPentru un graf cu 200 muchii: ";
                cout<<"\nCazul Favorabil: ";
                 G. build (200, F, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G. build (200, F, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks()<<" iteratii.";
                cout<<"\nCazul Nefavorabil: ";
                G.build(200,N, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (200, N, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";
                cout<<"\nCazul Random :";
                G.build(200, R, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (200, R, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";

                cout<<"\n\nPentru un graf cu 500 muchii: ";
                cout<<"\nCazul Favorabil: ";
                 G. build (500, F, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G. build (500, F, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks()<<" iteratii.";
                cout<<"\nCazul Nefavorabil: ";
                G.build(500,N, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (500, N, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";
                cout<<"\nCazul Random :";
                G.build(500, R, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (500, R, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";


                cout<<"\n\nPentru un graf cu 1000 de muchii: ";
                cout<<"\nCazul Favorabil: ";
                 G. build (1000, F, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G. build (1000, F, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks()<<" iteratii.";
                cout<<"\nCazul Nefavorabil: ";
                G.build(1000,N, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (1000, N, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";
                cout<<"\nCazul Random :";
                G.build(1000, R, K);
                reset_ticks ();
                G.kruskalMST();
                cout<<"\nAlgoritmul Kruskal: "<<get_ticks ()<<" iteratii.";
                G.build (1000, R, P);
                reset_ticks ();
                G.primMST();
                cout<<"\nAlgoritmul Prim: "<<get_ticks ()<<" iteratii.";



        return 0;

}
